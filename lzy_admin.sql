/*
 Navicat Premium Data Transfer

 Source Server         : localhost
 Source Server Type    : MySQL
 Source Server Version : 50562 (5.5.62-log)
 Source Host           : localhost:3306
 Source Schema         : lzy_admin

 Target Server Type    : MySQL
 Target Server Version : 50562 (5.5.62-log)
 File Encoding         : 65001

 Date: 02/02/2024 14:09:21
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for wb_articles
-- ----------------------------
DROP TABLE IF EXISTS `wb_articles`;
CREATE TABLE `wb_articles`  (
  `aid` int(11) NOT NULL AUTO_INCREMENT,
  `uid` int(11) NULL DEFAULT NULL,
  `create_date` datetime NULL DEFAULT NULL,
  `title` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `modified_date` datetime NULL DEFAULT NULL,
  `cover_img` char(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `comments_count` int(11) NULL DEFAULT NULL,
  `main` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `partial_content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `access_count` int(11) NULL DEFAULT 0,
  PRIMARY KEY (`aid`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 22 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of wb_articles
-- ----------------------------
INSERT INTO `wb_articles` VALUES (1, 0, '2022-10-25 15:00:00', '新时代、新征程', '\n南京货场疫情已有77例阳性，该毒株平均1人传染18人,奥密克戎BA.5.2进化分支,平均1个感染者可传18人\n\n\n\n\n> [杭州网报道](https://news.hangzhou.com.cn/shxw/content/2022-10/30/content_8386827_2.htm)\n\n## 一是传播速度快、隐匿性强\n\n是目前我国已知传播力最强的流行毒株之一，传播能力较之前的毒株有显著增加。根据有关研究报道，该毒株的基本再生数为18.6，通俗地说就是平均1个感染者在其传染期内能够传染给18人。\n\n## 二是潜伏期和代间距短\n\n疫情发展迅速，感染者从被感染到传染人平均仅为2天时间，最短仅需24小时左右，为疫情防控带来更大难度；同时由于潜伏期较短，少部分感染者发现核酸检测阳性时，已在家庭、社区等人群中造成隐匿性传播。\n\n## 三是免疫逃逸能力强\n\n会造成感染病例较其他毒株相对增多，但接种疫苗对防重症、防死亡的效果仍非常显著。\n\n## 四是病毒复制快\n\n部分病例在发现时CT值较低，也就是病毒载量较高，往往在发现时已造成周围人群感染。\n\n::: warning\n  在此我们呼吁市民：<br/>\n1.一是保持良好的个人及环境卫生，勤洗手，规范佩戴口罩，打喷嚏或咳嗽时用纸巾掩住口鼻，保持家庭及工作场所通风良好；\n2. 二是尽量减少不必要的外出，不聚集，保持社交距离；\n3. 三是7日内去过中高风险地区或与确诊患者、无症状感染者有接触史和轨迹交叉的请主动报备，配合落实健康管理；\n4. 四是主动及时参加规定频次的区域核酸检测，对及时发现感染者尤为重要；\n5. 五是及早全程接种或加强接种新冠疫苗，进一步筑牢免疫屏障；\n6. 六是一旦出现发热、咽痛、咳嗽等呼吸道症状及时到发热门诊就医排查和诊疗。\n:::\n', '2022-10-25 15:00:00', '/img/articleImages/upload-image1669025783499.jpeg', 0, '<p data-v-md-line=\"2\">南京货场疫情已有77例阳性，该毒株平均1人传染18人,奥密克戎BA.5.2进化分支,平均1个感染者可传18人</p>\n<blockquote data-v-md-line=\"7\">\n<p data-v-md-line=\"7\"><a href=\"https://news.hangzhou.com.cn/shxw/content/2022-10/30/content_8386827_2.htm\" target=\"_blank\">杭州网报道<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\" x=\"0px\" y=\"0px\" viewbox=\"0 0 100 100\" width=\"15\" height=\"15\" class=\"v-md-svg-outbound\"><path fill=\"currentColor\" d=\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\"></path> <polygon fill=\"currentColor\" points=\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\"></polygon></svg></a></p>\n</blockquote>\n<h2 data-v-md-heading=\"一是传播速度快、隐匿性强\" id=\"toc-head-8\" data-v-md-line=\"9\">一是传播速度快、隐匿性强</h2>\n<p data-v-md-line=\"11\">是目前我国已知传播力最强的流行毒株之一，传播能力较之前的毒株有显著增加。根据有关研究报道，该毒株的基本再生数为18.6，通俗地说就是平均1个感染者在其传染期内能够传染给18人。</p>\n<h2 data-v-md-heading=\"二是潜伏期和代间距短\" id=\"toc-head-12\" data-v-md-line=\"13\">二是潜伏期和代间距短</h2>\n<p data-v-md-line=\"15\">疫情发展迅速，感染者从被感染到传染人平均仅为2天时间，最短仅需24小时左右，为疫情防控带来更大难度；同时由于潜伏期较短，少部分感染者发现核酸检测阳性时，已在家庭、社区等人群中造成隐匿性传播。</p>\n<h2 data-v-md-heading=\"三是免疫逃逸能力强\" id=\"toc-head-16\" data-v-md-line=\"17\">三是免疫逃逸能力强</h2>\n<p data-v-md-line=\"19\">会造成感染病例较其他毒株相对增多，但接种疫苗对防重症、防死亡的效果仍非常显著。</p>\n<h2 data-v-md-heading=\"四是病毒复制快\" id=\"toc-head-20\" data-v-md-line=\"21\">四是病毒复制快</h2>\n<p data-v-md-line=\"23\">部分病例在发现时CT值较低，也就是病毒载量较高，往往在发现时已造成周围人群感染。</p>\n<div class=\"v-md-plugin-tip warning\"><p class=\"v-md-plugin-tip-title\">注意</p>\n<p data-v-md-line=\"26\">在此我们呼吁市民：<br /><br>\n1.一是保持良好的个人及环境卫生，勤洗手，规范佩戴口罩，打喷嚏或咳嗽时用纸巾掩住口鼻，保持家庭及工作场所通风良好；<br>\n2. 二是尽量减少不必要的外出，不聚集，保持社交距离；<br>\n3. 三是7日内去过中高风险地区或与确诊患者、无症状感染者有接触史和轨迹交叉的请主动报备，配合落实健康管理；<br>\n4. 四是主动及时参加规定频次的区域核酸检测，对及时发现感染者尤为重要；<br>\n5. 五是及早全程接种或加强接种新冠疫苗，进一步筑牢免疫屏障；<br>\n6. 六是一旦出现发热、咽痛、咳嗽等呼吸道症状及时到发热门诊就医排查和诊疗。</p>\n</div>\n', '南京货场疫情已有77例阳性，该毒株平均1人传染18人,奥密克戎BA.5.2进化分支,平均1个感染者可传18人', 1);
INSERT INTO `wb_articles` VALUES (2, 1, '2022-11-15 22:29:43', 'Linux语句详解', '记录一下Linux常用语句，Linux和windows相比，很多管控都需要用命令来操作。windows以直观的可视化的方式操作，特别适合在桌面端PC上操作执行相应的软件。\n\n而Linux命令行方式的操作，特别是在服务器端编程、管理、运维方面，更加简单、短小、精悍。短短一行组合命令，即可完成在windows需要各种加工、整合的复杂高效的功能操作。 \n\nLinux的终端命令其实跟window系统的终端指令是相似的，很多在window中的指令在Linux也适用，\n> 参考地址 [https://blog.csdn.net/liuwei0376/article/details/88245472](https://blog.csdn.net/liuwei0376/article/details/88245472)\n\n\n|命令|说明|\n|-|-|\n|ls [指定路径] |查看当前文件夹内容|\n|ll [指定路径]|查看当前文件夹的权限|\n|touch *** |添加文件|\n|rm [选项] [文件或者目录]|查看当前文件夹的权限|\n|mkdir ***|添加文件夹 后面跟的是文件名|\n|rmdir -r ***  |查看删除指定文件夹，不带-r只能删除内容的文件夹，-r是删除目录不为空的情况  文件夹内容|\n|vim|查看当前文件内容|', '2022-11-15 22:29:43', '/img/articleImages/upload-image1683476849884.jpeg', 0, '<p data-v-md-line=\"1\">记录一下Linux常用语句，Linux和windows相比，很多管控都需要用命令来操作。windows以直观的可视化的方式操作，特别适合在桌面端PC上操作执行相应的软件。</p>\n<p data-v-md-line=\"3\">而Linux命令行方式的操作，特别是在服务器端编程、管理、运维方面，更加简单、短小、精悍。短短一行组合命令，即可完成在windows需要各种加工、整合的复杂高效的功能操作。</p>\n<p data-v-md-line=\"5\">Linux的终端命令其实跟window系统的终端指令是相似的，很多在window中的指令在Linux也适用，</p>\n<blockquote data-v-md-line=\"6\">\n<p data-v-md-line=\"6\">参考地址 <a href=\"https://blog.csdn.net/liuwei0376/article/details/88245472\" target=\"_blank\">https://blog.csdn.net/liuwei0376/article/details/88245472<svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\" focusable=\"false\" x=\"0px\" y=\"0px\" viewbox=\"0 0 100 100\" width=\"15\" height=\"15\" class=\"v-md-svg-outbound\"><path fill=\"currentColor\" d=\"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z\"></path> <polygon fill=\"currentColor\" points=\"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9\"></polygon></svg></a></p>\n</blockquote>\n<table data-v-md-line=\"9\">\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ls [指定路径]</td>\n<td>查看当前文件夹内容</td>\n</tr>\n<tr>\n<td>ll [指定路径]</td>\n<td>查看当前文件夹的权限</td>\n</tr>\n<tr>\n<td>touch ***</td>\n<td>添加文件</td>\n</tr>\n<tr>\n<td>rm [选项] [文件或者目录]</td>\n<td>查看当前文件夹的权限</td>\n</tr>\n<tr>\n<td>mkdir ***</td>\n<td>添加文件夹 后面跟的是文件名</td>\n</tr>\n<tr>\n<td>rmdir -r ***</td>\n<td>查看删除指定文件夹，不带-r只能删除内容的文件夹，-r是删除目录不为空的情况  文件夹内容</td>\n</tr>\n<tr>\n<td>vim</td>\n<td>查看当前文件内容</td>\n</tr>\n</tbody>\n</table>\n', '记录一下Linux常用语句，Linux和windows相比，很多管控都需要用命令来操作。windows以直观的可视化的方式操作，特别适合在桌面端PC上操作执行相应的软件。', 4);
INSERT INTO `wb_articles` VALUES (15, 1, '2022-12-26 17:30:10', 'linux考试前复习记录', '本文简介： 考试、考简单的Linux终端指令。我先在这里申明，本文仅是自己参考课件的个人总结，主要用于Linux内核课程考试复习。确实会有很多地方不完善。\n\n\n## 1. Linux介绍\n![点击放大](/api/public/img/articleImages/upload-image1666873015585.png)\n\n额...我好像暂时处于最下面2个级别 暂时只会些简单的命令。\n\n\n![点击放大](/api/public/img/articleImages/upload-image1666873756049.jpeg)\n::: tip\n  /root目录是root目录（超级管理员），系统中是最高级用户\n  /home目录是当前系统下所有次级用户的主目录，存放着所有用户的数据目录\n:::\n\n## 2.新增硬盘\n``` vim\n磁盘和文件空间 ：fdisk df du\n文件目录与管理：cd pwd mkdir rmdir ls cp rm mv\n查看文件内容 cat、tac、more、less、head 、tail\n文件目录与权限 ：chmod chown chgrp umask\n文件查找：which、whereis、locate、find、find\n```\n### 2.1 物理分盘\n- 在关机状态下，在系统外建立物理硬盘，给予20Gb空间\n### 2.2 查看硬盘\n- 进入Linux终端，输入 su以及密码进入root用户，fdisk -l 查看当前系统所有硬盘情况，如下图可以看见dev/sdb没有进行划分\n- ![点击放大](/api/public/img/articleImages/upload-image1666874929806.png)\n### 2.3 硬盘分区\n- 将sdb硬盘进行分区，分别划分为5GB、6GB大小，可通过命令 fdisk [硬盘路径] 按照指示进行分区，基本回车即可，第四个选择的时候输入你要分区的大小，逐次添加即可，添加完最后不要忘记输入 wq 来保存刚刚的分区。\n\n- ![点击放大](/api/public/img/articleImages/upload-image1666875393992.png)\n### 2.4 格式化分区\n-  再通过fdisk -l 查看当前系统硬盘是否分区完成，完成后需要格式化、挂载才能真正，先进行格式化输入指令mkfs.ext3[ext3是选择项,多种类型,区分类型] [需要格式化的单独分区路径]   输入之后需要等待一下。\n- 相关命令：mkdosfs、mke2fs、mkfs、mkfs.btrfs、mkfs.cramfs、mkfs.ext2、mkfs.ext3、mkfs.ext4、mkfs.fat、mkfs.hfsplus、mkfs.minix、mkfs.msdos、mkfs.ntfs、mkfs.vfat、mkfs.xfs。\n- ![点击放大](/api/public/img/articleImages/upload-image1666876472789.png)\n### 2.5 挂载分区\n- 文件系统的挂载主要有两种方式：手动挂载、系统启动时挂载。\n- mount命令（手动挂载）\n``` vim\n 语法：mount  [选项]  [设备]  [挂载点]  > ~ mount /dev/sdb1 /mnt/1\n```\n- 功能：将设备挂载到挂载点处，设备是指要挂载的设备名称，挂载点是指文件系统中已经存在的一个目录名。挂载完可以使用df -h 命令来查看挂载状态和硬盘使用量信息。\n- \n- ![点击放大](/api/public/img/articleImages/upload-image1666877715939.png)\n- \n\n## 3.文件与目录管理\n- ![点击放大](/api/public/img/articleImages/upload-image1666878591836.png)\n### 3.1 查看目录内容 \n- ![点击放大](/api/public/img/articleImages/upload-image1666879395893.png)\n\n## 4.用户权限\n------------------------------------\n\n语法：pwd  [选项]\n功能：查看“当前工作目录”的完整路径。一般情况下不带任何参数，如果目录是链接时，pwd -P显示出实际路径，而非使用链接（link）路径。\n``` vim\n pwd		//查看当前工作目录的完整路径\n pwd  -L	//目录有链接时，输出链接路径\n pwd  -P	//目录有链接时，pwd -P显示实际路径，而非链接路径\n```\n\n------------------------------------\n\n![点击放大](/api/public/img/articleImages/upload-image1666879603545.png)\n![点击放大](/api/public/img/articleImages/upload-image1666879622196.png)\n\n------------------------------------\n最高权限为 777   使用的是二进制运算来计算等级，\n分别代表着User：文件所属者、Group：文件所属组、Other：其他人\nLinux 下的每个文件都有以下三种权限\n|表示读取|对应的数字|\n|-|-|              \n|r| 4|        \n|w|2|\n|x|1|通过 4、2、1 的组合，我们可以得到以下几种权限\n------------------------------------\n通过 4、2、1 的组合，我们可以得到以下几种权限\n|权限等级数字|等级说明|字符表示|\n|-|-|-|\n|0|没有权限|-|\n|4|读取权限|w|\n|5|读取和执行权限|rx|\n|6|读取和写入权限|rw|\n|7|读取、写入和执行权限|rwx|\n------------------------------------\n修改权限\n``` vim\nchmod 777 文件名 \n```\n用 rwxrwxrwx 表示，赋予 geshanzsq.tar 文件所属者、文件所属组和其他人都有读取、写入和执行权限的全部权限，也是最高权限。\n\nLinux 修改目录下的所有文件权限的命令为\n``` vim\nchmod -R 764 目录名\n```\n## 5.终端操作\n::: tip 任务需求：\n1. 将系统进程信息保存到文件process.txt\n2. 顺序显示完文件process.txt \n3. 一页一页显示文件process.txt\n4. 显示文件process.txt前8行\n:::\n\n**ps [选项] 查看当前终端进程**\n|选项|功能|\n|-|-|\n|a|显示包括终端的进程|\n|u|显示进程所有者的信息|\n|x|显示所有包含了不连接终端的进程（如守护进程）|\n|p|显示指定进程ID的信息|\n|-a|显示当前终端下执行的进程|\n|-u|此参数的效果和指定-U参数相同|\n|-U|列出属于该用户的进程的状况，也可使用用户名称来指定|\n|-e|显示所有进程|\n|-f|显示进程的父进程|\n|-l|以长列表的方式显示信息|\n|-o format|显示指定字段的信息，其中format是空格或逗号分隔的字段列表,示例如下： </br>ps -o \"pid comm %cpu %mem state tty\"</br>ps -o pid,comm,%cpu,%mem,state,tty|\n\n**需求实现代码**\n``` vim\nps -e > process.txt  //1.将所有任务进程 添加进process.txt中\ncat process.txt      //2.把process.txt 顺序连接后传到基本输出中\nmore process.txt     //3.把process.txt 一页一页的显示出来(只能往下看，不能返回上一页)\nless process.txt     //把process.txt 一页一页的显示出来(可以前后翻页 不同于more，通过上下键进行翻页)\nnl process.txt       //process.txt 输出时带行号，但是不对空行编号\nhead -8 process.txt  //4.显示文件process.txt的前8行内容\ntail -8 process.txt  //显示文件process.txt的后8行内容\nwc process.txt       //查看文件的字节数、字数、行数、以及名称\n```\n## 6.目录与文件管理\n\n::: tip 任务需求：\n1. 进入主目录，创建目录 school/department\n2. 创建目录 /data/school/department\n3. 在主目录的子目录school/department创建文件class1.txt\n4. 并将该文件移动到 /data/school/department\n5. 删除主目录的子目录school\n6. 删除目录 /data\n:::\n文件与目录的创建、复制、删除、转移及重命名：touch、mkdir、rmdir、cp、mv、rm\nrmdir [选项] [目录] 删除目录 选项支持 -p 递归删除目录，只能删除空目录。提示：失败，目录非空  \nrm [选项] [目录] 删除目录以及文件，内置条件如下 \n|选项|功能|\n|-|-|\n|-d|直接把欲删除的目录的硬链接数据删成0,同时删成该目录|\n|-f|强制删成文件或目录|\n|-i|删除既有文件或目录之前先询问用户，是否要进行交互式删除|\n|-r或-R|递归处理，将指定目录下的所有文件及子目录一并处理|\n|-v|显示命令执行过程，删除之中出现进度报告。在删除许多文件时较有用|\n``` vim\ncd ~                                   //1.进入主目录，\nmkdir -p school/department             //1.创建目录 school/department\nmkdir -p /data/school/department       //2.创建目录 /data/school/department\ntouch class1.txt                       //3.在主目录的子目录school/department创建文件class1.txt\nmv class1.txt /data/school/department  //4.并将该文件移动到 /data/school/department\nrm -r ~/school                         //5.删除主目录的子目录school\nrm -r /data                            //6.删除目录 /data\n```\n\n', '2022-12-26 17:30:10', '/img/articleImages/upload-image1683476832650.jpeg', NULL, '<p data-v-md-line=\"1\">本文简介： 考试、考简单的Linux终端指令。我先在这里申明，本文仅是自己参考课件的个人总结，主要用于Linux内核课程考试复习。确实会有很多地方不完善。</p>\n<h2 data-v-md-heading=\"_1-linux介绍\" id=\"toc-head-3\" data-v-md-line=\"4\">1. Linux介绍</h2>\n<p data-v-md-line=\"5\"><img src=\"/api/public/img/articleImages/upload-image1666873015585.png\" alt=\"点击放大\"></p>\n<p data-v-md-line=\"7\">额…我好像暂时处于最下面2个级别 暂时只会些简单的命令。</p>\n<p data-v-md-line=\"10\"><img src=\"/api/public/img/articleImages/upload-image1666873756049.jpeg\" alt=\"点击放大\"></p>\n<div class=\"v-md-plugin-tip tip\"><p class=\"v-md-plugin-tip-title\">提示</p>\n<p data-v-md-line=\"12\">/root目录是root目录（超级管理员），系统中是最高级用户<br>\n/home目录是当前系统下所有次级用户的主目录，存放着所有用户的数据目录</p>\n</div>\n<h2 data-v-md-heading=\"_2-新增硬盘\" id=\"toc-head-15\" data-v-md-line=\"16\">2.新增硬盘</h2>\n<div data-v-md-line=\"17\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code>磁盘和文件空间 ：fdisk df du\n文件目录与管理：<span class=\"token keyword\">cd</span> <span class=\"token keyword\">pwd</span> mkdir rmdir <span class=\"token keyword\">ls</span> <span class=\"token keyword\">cp</span> rm mv\n查看文件内容 <span class=\"token keyword\">cat</span>、tac、<span class=\"token builtin\">more</span>、less、head 、tail\n文件目录与权限 ：chmod chown chgrp umask\n文件查找：which、whereis、locate、<span class=\"token keyword\">find</span>、<span class=\"token keyword\">find</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><h3 data-v-md-heading=\"_2-1-物理分盘\" id=\"toc-head-23\" data-v-md-line=\"24\">2.1 物理分盘</h3>\n<ul data-v-md-line=\"25\">\n<li>在关机状态下，在系统外建立物理硬盘，给予20Gb空间</li>\n</ul>\n<h3 data-v-md-heading=\"_2-2-查看硬盘\" id=\"toc-head-25\" data-v-md-line=\"26\">2.2 查看硬盘</h3>\n<ul data-v-md-line=\"27\">\n<li>进入Linux终端，输入 su以及密码进入root用户，fdisk -l 查看当前系统所有硬盘情况，如下图可以看见dev/sdb没有进行划分</li>\n<li><img src=\"/api/public/img/articleImages/upload-image1666874929806.png\" alt=\"点击放大\"></li>\n</ul>\n<h3 data-v-md-heading=\"_2-3-硬盘分区\" id=\"toc-head-28\" data-v-md-line=\"29\">2.3 硬盘分区</h3>\n<ul data-v-md-line=\"30\">\n<li>\n<p data-v-md-line=\"30\">将sdb硬盘进行分区，分别划分为5GB、6GB大小，可通过命令 fdisk [硬盘路径] 按照指示进行分区，基本回车即可，第四个选择的时候输入你要分区的大小，逐次添加即可，添加完最后不要忘记输入 wq 来保存刚刚的分区。</p>\n</li>\n<li>\n<p data-v-md-line=\"32\"><img src=\"/api/public/img/articleImages/upload-image1666875393992.png\" alt=\"点击放大\"></p>\n</li>\n</ul>\n<h3 data-v-md-heading=\"_2-4-格式化分区\" id=\"toc-head-32\" data-v-md-line=\"33\">2.4 格式化分区</h3>\n<ul data-v-md-line=\"34\">\n<li>再通过fdisk -l 查看当前系统硬盘是否分区完成，完成后需要格式化、挂载才能真正，先进行格式化输入指令mkfs.ext3[ext3是选择项,多种类型,区分类型] [需要格式化的单独分区路径]   输入之后需要等待一下。</li>\n<li>相关命令：mkdosfs、mke2fs、mkfs、mkfs.btrfs、mkfs.cramfs、mkfs.ext2、mkfs.ext3、mkfs.ext4、mkfs.fat、mkfs.hfsplus、mkfs.minix、mkfs.msdos、mkfs.ntfs、mkfs.vfat、mkfs.xfs。</li>\n<li><img src=\"/api/public/img/articleImages/upload-image1666876472789.png\" alt=\"点击放大\"></li>\n</ul>\n<h3 data-v-md-heading=\"_2-5-挂载分区\" id=\"toc-head-36\" data-v-md-line=\"37\">2.5 挂载分区</h3>\n<ul data-v-md-line=\"38\">\n<li>文件系统的挂载主要有两种方式：手动挂载、系统启动时挂载。</li>\n<li>mount命令（手动挂载）</li>\n</ul>\n<div data-v-md-line=\"40\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code> 语法：mount  <span class=\"token punctuation\">[</span>选项<span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">[</span>设备<span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">[</span>挂载点<span class=\"token punctuation\">]</span>  <span class=\"token operator\">&gt;</span> ~ mount <span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>sdb1 <span class=\"token operator\">/</span>mnt<span class=\"token operator\">/</span><span class=\"token number\">1</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ul data-v-md-line=\"43\">\n<li>功能：将设备挂载到挂载点处，设备是指要挂载的设备名称，挂载点是指文件系统中已经存在的一个目录名。挂载完可以使用df -h 命令来查看挂载状态和硬盘使用量信息。</li>\n<li></li>\n<li><img src=\"/api/public/img/articleImages/upload-image1666877715939.png\" alt=\"点击放大\"></li>\n<li></li>\n</ul>\n<h2 data-v-md-heading=\"_3-文件与目录管理\" id=\"toc-head-47\" data-v-md-line=\"48\">3.文件与目录管理</h2>\n<ul data-v-md-line=\"49\">\n<li><img src=\"/api/public/img/articleImages/upload-image1666878591836.png\" alt=\"点击放大\"></li>\n</ul>\n<h3 data-v-md-heading=\"_3-1-查看目录内容\" id=\"toc-head-49\" data-v-md-line=\"50\">3.1 查看目录内容</h3>\n<ul data-v-md-line=\"51\">\n<li><img src=\"/api/public/img/articleImages/upload-image1666879395893.png\" alt=\"点击放大\"></li>\n</ul>\n<h2 data-v-md-heading=\"_4-用户权限\" id=\"toc-head-52\" data-v-md-line=\"53\">4.用户权限</h2>\n<hr data-v-md-line=\"54\">\n<p data-v-md-line=\"56\">语法：pwd  [选项]<br>\n功能：查看“当前工作目录”的完整路径。一般情况下不带任何参数，如果目录是链接时，pwd -P显示出实际路径，而非使用链接（link）路径。</p>\n<div data-v-md-line=\"58\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code> <span class=\"token keyword\">pwd</span>		<span class=\"token operator\">/</span><span class=\"token operator\">/</span>查看当前工作目录的完整路径\n <span class=\"token keyword\">pwd</span>  <span class=\"token operator\">-</span>L	<span class=\"token operator\">/</span><span class=\"token operator\">/</span>目录有链接时，输出链接路径\n <span class=\"token keyword\">pwd</span>  <span class=\"token operator\">-</span><span class=\"token keyword\">P</span>	<span class=\"token operator\">/</span><span class=\"token operator\">/</span>目录有链接时，<span class=\"token keyword\">pwd</span> <span class=\"token operator\">-</span><span class=\"token keyword\">P</span>显示实际路径，而非链接路径\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><hr data-v-md-line=\"64\">\n<p data-v-md-line=\"66\"><img src=\"/api/public/img/articleImages/upload-image1666879603545.png\" alt=\"点击放大\"><br>\n<img src=\"/api/public/img/articleImages/upload-image1666879622196.png\" alt=\"点击放大\"></p>\n<hr data-v-md-line=\"69\">\n<p data-v-md-line=\"70\">最高权限为 777   使用的是二进制运算来计算等级，<br>\n分别代表着User：文件所属者、Group：文件所属组、Other：其他人<br>\nLinux 下的每个文件都有以下三种权限</p>\n<table data-v-md-line=\"73\">\n<thead>\n<tr>\n<th>表示读取</th>\n<th>对应的数字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>r</td>\n<td>4</td>\n</tr>\n<tr>\n<td>w</td>\n<td>2</td>\n</tr>\n<tr>\n<td>x</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<hr data-v-md-line=\"78\">\n<p data-v-md-line=\"79\">通过 4、2、1 的组合，我们可以得到以下几种权限</p>\n<table data-v-md-line=\"80\">\n<thead>\n<tr>\n<th>权限等级数字</th>\n<th>等级说明</th>\n<th>字符表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>没有权限</td>\n<td>-</td>\n</tr>\n<tr>\n<td>4</td>\n<td>读取权限</td>\n<td>w</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取和执行权限</td>\n<td>rx</td>\n</tr>\n<tr>\n<td>6</td>\n<td>读取和写入权限</td>\n<td>rw</td>\n</tr>\n<tr>\n<td>7</td>\n<td>读取、写入和执行权限</td>\n<td>rwx</td>\n</tr>\n</tbody>\n</table>\n<hr data-v-md-line=\"87\">\n<p data-v-md-line=\"88\">修改权限</p>\n<div data-v-md-line=\"89\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code>chmod <span class=\"token number\">777</span> 文件名 \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><p data-v-md-line=\"92\">用 rwxrwxrwx 表示，赋予 geshanzsq.tar 文件所属者、文件所属组和其他人都有读取、写入和执行权限的全部权限，也是最高权限。</p>\n<p data-v-md-line=\"94\">Linux 修改目录下的所有文件权限的命令为</p>\n<div data-v-md-line=\"95\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code>chmod <span class=\"token operator\">-</span>R <span class=\"token number\">764</span> 目录名\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><h2 data-v-md-heading=\"_5-终端操作\" id=\"toc-head-97\" data-v-md-line=\"98\">5.终端操作</h2>\n<div class=\"v-md-plugin-tip tip\"><p class=\"v-md-plugin-tip-title\">任务需求：</p>\n<ol data-v-md-line=\"100\">\n<li>将系统进程信息保存到文件process.txt</li>\n<li>顺序显示完文件process.txt</li>\n<li>一页一页显示文件process.txt</li>\n<li>显示文件process.txt前8行</li>\n</ol>\n</div>\n<p data-v-md-line=\"106\"><strong>ps [选项] 查看当前终端进程</strong></p>\n<table data-v-md-line=\"107\">\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>显示包括终端的进程</td>\n</tr>\n<tr>\n<td>u</td>\n<td>显示进程所有者的信息</td>\n</tr>\n<tr>\n<td>x</td>\n<td>显示所有包含了不连接终端的进程（如守护进程）</td>\n</tr>\n<tr>\n<td>p</td>\n<td>显示指定进程ID的信息</td>\n</tr>\n<tr>\n<td>-a</td>\n<td>显示当前终端下执行的进程</td>\n</tr>\n<tr>\n<td>-u</td>\n<td>此参数的效果和指定-U参数相同</td>\n</tr>\n<tr>\n<td>-U</td>\n<td>列出属于该用户的进程的状况，也可使用用户名称来指定</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>显示所有进程</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>显示进程的父进程</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>以长列表的方式显示信息</td>\n</tr>\n<tr>\n<td>-o format</td>\n<td>显示指定字段的信息，其中format是空格或逗号分隔的字段列表,示例如下： </br>ps -o “pid comm %cpu %mem state tty”</br>ps -o pid,comm,%cpu,%mem,state,tty</td>\n</tr>\n</tbody>\n</table>\n<p data-v-md-line=\"121\"><strong>需求实现代码</strong></p>\n<div data-v-md-line=\"122\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code><span class=\"token keyword\">ps</span> <span class=\"token operator\">-</span><span class=\"token keyword\">e</span> <span class=\"token operator\">&gt;</span> process<span class=\"token operator\">.</span>txt  <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">.</span>将所有任务进程 添加进process<span class=\"token operator\">.</span>txt中\n<span class=\"token keyword\">cat</span> process<span class=\"token operator\">.</span>txt      <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">.</span>把process<span class=\"token operator\">.</span>txt 顺序连接后传到基本输出中\n<span class=\"token builtin\">more</span> process<span class=\"token operator\">.</span>txt     <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">.</span>把process<span class=\"token operator\">.</span>txt 一页一页的显示出来<span class=\"token punctuation\">(</span>只能往下看，不能返回上一页<span class=\"token punctuation\">)</span>\nless process<span class=\"token operator\">.</span>txt     <span class=\"token operator\">/</span><span class=\"token operator\">/</span>把process<span class=\"token operator\">.</span>txt 一页一页的显示出来<span class=\"token punctuation\">(</span>可以前后翻页 不同于<span class=\"token builtin\">more</span>，通过上下键进行翻页<span class=\"token punctuation\">)</span>\nnl process<span class=\"token operator\">.</span>txt       <span class=\"token operator\">/</span><span class=\"token operator\">/</span>process<span class=\"token operator\">.</span>txt 输出时带行号，但是不对空行编号\nhead <span class=\"token operator\">-</span><span class=\"token number\">8</span> process<span class=\"token operator\">.</span>txt  <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">.</span>显示文件process<span class=\"token operator\">.</span>txt的前<span class=\"token number\">8</span>行内容\ntail <span class=\"token operator\">-</span><span class=\"token number\">8</span> process<span class=\"token operator\">.</span>txt  <span class=\"token operator\">/</span><span class=\"token operator\">/</span>显示文件process<span class=\"token operator\">.</span>txt的后<span class=\"token number\">8</span>行内容\n<span class=\"token builtin\">wc</span> process<span class=\"token operator\">.</span>txt       <span class=\"token operator\">/</span><span class=\"token operator\">/</span>查看文件的字节数、字数、行数、以及名称\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><h2 data-v-md-heading=\"_6-目录与文件管理\" id=\"toc-head-131\" data-v-md-line=\"132\">6.目录与文件管理</h2>\n<div class=\"v-md-plugin-tip tip\"><p class=\"v-md-plugin-tip-title\">任务需求：</p>\n<ol data-v-md-line=\"135\">\n<li>进入主目录，创建目录 school/department</li>\n<li>创建目录 /data/school/department</li>\n<li>在主目录的子目录school/department创建文件class1.txt</li>\n<li>并将该文件移动到 /data/school/department</li>\n<li>删除主目录的子目录school</li>\n<li>删除目录 /data</li>\n</ol>\n</div>\n<p data-v-md-line=\"142\">文件与目录的创建、复制、删除、转移及重命名：touch、mkdir、rmdir、cp、mv、rm<br>\nrmdir [选项] [目录] 删除目录 选项支持 -p 递归删除目录，只能删除空目录。提示：失败，目录非空<br>\nrm [选项] [目录] 删除目录以及文件，内置条件如下</p>\n<table data-v-md-line=\"145\">\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-d</td>\n<td>直接把欲删除的目录的硬链接数据删成0,同时删成该目录</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>强制删成文件或目录</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>删除既有文件或目录之前先询问用户，是否要进行交互式删除</td>\n</tr>\n<tr>\n<td>-r或-R</td>\n<td>递归处理，将指定目录下的所有文件及子目录一并处理</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示命令执行过程，删除之中出现进度报告。在删除许多文件时较有用</td>\n</tr>\n</tbody>\n</table>\n<div data-v-md-line=\"152\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-vim line-numbers-mode\"><pre class=\"v-md-prism-vim\"><code><span class=\"token keyword\">cd</span> ~                                   <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">.</span>进入主目录，\nmkdir <span class=\"token operator\">-</span><span class=\"token keyword\">p</span> school<span class=\"token operator\">/</span>department             <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">1</span><span class=\"token operator\">.</span>创建目录 school<span class=\"token operator\">/</span>department\nmkdir <span class=\"token operator\">-</span><span class=\"token keyword\">p</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>school<span class=\"token operator\">/</span>department       <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">.</span>创建目录 <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>school<span class=\"token operator\">/</span>department\ntouch class1<span class=\"token operator\">.</span>txt                       <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token operator\">.</span>在主目录的子目录school<span class=\"token operator\">/</span>department创建文件class1<span class=\"token operator\">.</span>txt\nmv class1<span class=\"token operator\">.</span>txt <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>school<span class=\"token operator\">/</span>department  <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token operator\">.</span>并将该文件移动到 <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>school<span class=\"token operator\">/</span>department\nrm <span class=\"token operator\">-</span><span class=\"token keyword\">r</span> ~<span class=\"token operator\">/</span>school                         <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">5</span><span class=\"token operator\">.</span>删除主目录的子目录school\nrm <span class=\"token operator\">-</span><span class=\"token keyword\">r</span> <span class=\"token operator\">/</span>data                            <span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token operator\">.</span>删除目录 <span class=\"token operator\">/</span>data\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div>', '本文简介： 考试、考简单的Linux终端指令。我先在这里申明，本文仅是自己参考课件的个人总结，主要用于Linux内核课程考试复习。确实会有很多地方不完善。', 121);
INSERT INTO `wb_articles` VALUES (16, 1, '2023-07-23 04:22:24', 'vue3+ts+vite、node+ts+webpack 打包过程、以及对打包优化的理解', '本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题\n\n\n## vue3+ts+vite\n1. 安装vite的插件 vite-plugin-env-compatible\n``` bash\nnpm i vite-plugin-env-compatible \nyarn add vite-plugin-env-compatible\npnpm add vite-plugin-env-compatible\nni vite-plugin-env-compatible \n```\n再到 vite.config.ts 中进行插件配置\n``` ts\nimport envCompatible from \"vite-plugin-env-compatible\";\n\nexport default defineConfig(() => {\n  return {\n    envDir: path.resolve(__dirname, \"./env\"),\n    Plugins: [\n      vue(),\n      envCompatible(),\n    ],\n  }\n})\n```\n2. 在项目根目录创建.env和.env.production文件，其中分别配置有开发状态下和打包之后要上线的的接口路径。\n.env文件文件内容如下： ==这里我用到了vite的proxy代理 api，这里可以用服务器地址==\n``` \nVITE_BASE_URL=/api  \n```\n.env.production文件文件内容如下： ==这里使用的是你打包之后需要上传服务器的后台地址（自己注意结尾斜杠）==\n``` \nVITE_BASE_URL=http:47.113.222.95:8089\n```\n3. 在vue项目中使用配置路径  (不需要导入任何东西，直接使用import.meta.env来获取即可)\n``` ts\nconst api = import.meta.env.VITE_BASE_URL\nhttp(\"get\", api + \"/proxyApis/jinrishici/info\", headers).then((res: ipGetType) => {\n    //将个人信息存入localStorage，避免每次刷新都要请求接口\n    setLocalStorage(\"weatherData\", res.data)\n});\n```\n4. 这个打包的缺点就是不能在css中使用动态地址，必须通过js渲染（vue的动态style）\n\n\n## node+ts+webpack\n使用webpack的原因是，网上用vite打包node的参考比较少。webpack对比vite确实不是很便捷，暂时只能做到打包，没办法解决打包之后的路径的问题，只能手动去更换线上路径，比较麻烦，后面想办法再进行优化吧。\n以下是打包过程：\n1. 安装webpack、ts-loader、typescript\n``` bash\nnpm i webpack webpack-cli ts-loader typescript\nyarn add webpack webpack-cli ts-loader typescript\npnpm add webpack webpack-cli ts-loader typescript\nni webpack webpack-cli ts-loader typescript\n``` \n2. 然后在==webpack.config.js==进行配置，ts文件使用ts-loader进行处理。\n``` js\n// webpack.config.js\nconst path = require(\"path\");\n\nmodule.exports = {\n    entry: \"./app.ts\",\n    target: \"node\",\n    output: {\n        filename: \"bundle.js\",\n        path: path.resolve(__dirname, \"dist\"), // 输出文件夹路径\n        publicPath: \"/\" // 公共路径，用于处理静态资源的访问路径\n    },\n    resolve: {\n        extensions: [\".ts\", \".js\"],\n    },\n    module: {\n        rules: [\n            {\n                test: /.ts$/,\n                use: \"ts-loader\",\n                exclude: /node_modules/,\n            },\n        ],\n    },\n    optimization: {\n        minimize: false\n    },\n    mode: \"production\" // 生产模式，会对代码进行优化\n};\n```\n3. 运行指令编写 → package.json \n``` json\n\"scripts\": {\n    \"server\": \"ts-node-dev  ./app.ts --mode dev\",\n    \"tsc\": \"tsc\",\n    \"build\": \"webpack --mode production\",\n    \"rmjs\": \"ts-node-dev utilsPublic/rmjs.ts\",\n    \"perfectBuild\": \"tsc && webpack --mode production && ts-node-dev utilsPublic/rmjs.ts\",\n    \"fontUnicode\": \"ts-node-dev utilsPublic/unique.ts\"\n},\n```\ntsc : 将ts的代码编译为js\nbuild ：使用webpack将项目中的js进行打包\nrmjs : 将编译ts留下的js进行删除（自定义方法，不删除不行啊，在开发模式每次修改内容都不生效）\nperfectBuild ： 将node.ts打包一步到位 先转译ts→进行打包→删除js\n4. 补充一份删除js的代码  文件路径：utilsPublic/rmjs.ts 自行修改一下即可\n``` ts\n//node 删除项目中所有js文件\nimport fs from \"node:fs\"\nimport path from \"node:path\";\n\nconst files = fs.readdirSync(path.resolve(__dirname, \"../\"));\nconst exclude = [\n    \"node_modules\",\n    \".git\",\n    \".idea\",\n    \"dist\",\n    \"public\",\n    \"webpack.config.js\"\n]\n\n// 使用递归寻找出所有的js文件\nconst findJs = (files: string[], basePath: string): string[] => {\n    const jsFiles: string[] = [];\n    files.forEach((item) => {\n        const fullPath = path.join(basePath, item); // 获取文件的完整路径\n        if (exclude.includes(item)) return;\n        const stat = fs.statSync(fullPath);\n        if (stat.isDirectory()) {\n            const dirFiles = fs.readdirSync(fullPath);\n            jsFiles.push(...findJs(dirFiles, fullPath)); // 传入完整路径递归查找子目录\n        } else {\n            if (item.endsWith(\".js\")) {\n                jsFiles.push(fullPath);\n            }\n        }\n    });\n    return jsFiles;\n};\nconst jsFiles = findJs(files, path.resolve(__dirname, \"../\"));   \njsFiles.forEach((item) => {\n    fs.unlinkSync(item);\n})\n```\n\n5. 以上就是node+ts+webpack打包的全过程，缺点十分明显，没办法解决打包前后的路径问题，服务器跟本地的地址切换不方便，得手动去更换。还有就是没办法将静态资源public放入打包的dist文件夹中，得自己去复制一份。\n\n## 总结\n写这篇文章的时候很奇怪，不知道为什么快速的添加内容在markdown组件中就会将中文内容转为英文的。比如说快速的敲击几下空格，它会将你选中的内容，或者部分内容转换为英文的。不知道是不是markdown组件自带的。\n   ![点击放大](/api/public/img/articleImages/upload-image1690188380598.png)\n![点击放大](/api/public/img/articleImages/upload-image1690188389965.png)\n', '2023-07-23 04:22:24', '/img/articleImages/upload-image1690114333197.png', NULL, '<p data-v-md-line=\"1\">本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题</p>\n<h2 data-v-md-heading=\"vue3-ts-vite\" id=\"toc-head-3\" data-v-md-line=\"4\">vue3+ts+vite</h2>\n<ol data-v-md-line=\"5\">\n<li>安装vite的插件 vite-plugin-env-compatible</li>\n</ol>\n<div data-v-md-line=\"6\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-bash line-numbers-mode\"><pre class=\"v-md-prism-bash\"><code>npm i vite-plugin-env-compatible \nyarn add vite-plugin-env-compatible\npnpm add vite-plugin-env-compatible\nni vite-plugin-env-compatible \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><p data-v-md-line=\"12\">再到 vite.config.ts 中进行插件配置</p>\n<div data-v-md-line=\"13\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-ts line-numbers-mode\"><pre class=\"v-md-prism-ts\"><code><span class=\"token keyword\">import</span> envCompatible <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-env-compatible\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    envDir<span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./env\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">envCompatible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"2\" data-v-md-line=\"26\">\n<li>在项目根目录创建.env和.env.production文件，其中分别配置有开发状态下和打包之后要上线的的接口路径。<br>\n.env文件文件内容如下： <mark>这里我用到了vite的proxy代理 api，这里可以用服务器地址</mark></li>\n</ol>\n<div data-v-md-line=\"28\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper- line-numbers-mode\"><pre class=\"v-md-prism-\"><code>VITE_BASE_URL=/api  \n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><p data-v-md-line=\"31\">.env.production文件文件内容如下： <mark>这里使用的是你打包之后需要上传服务器的后台地址（自己注意结尾斜杠）</mark></p>\n<div data-v-md-line=\"32\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper- line-numbers-mode\"><pre class=\"v-md-prism-\"><code>VITE_BASE_URL=http:47.113.222.95:8089\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"3\" data-v-md-line=\"35\">\n<li>在vue项目中使用配置路径  (不需要导入任何东西，直接使用import.meta.env来获取即可)</li>\n</ol>\n<div data-v-md-line=\"36\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-ts line-numbers-mode\"><pre class=\"v-md-prism-ts\"><code><span class=\"token keyword\">const</span> api <span class=\"token operator\">=</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_BASE_URL</span>\n<span class=\"token function\">http</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> api <span class=\"token operator\">+</span> <span class=\"token string\">\"/proxyApis/jinrishici/info\"</span><span class=\"token punctuation\">,</span> headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span> ipGetType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//将个人信息存入localStorage，避免每次刷新都要请求接口</span>\n    <span class=\"token function\">setLocalStorage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"weatherData\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"4\" data-v-md-line=\"43\">\n<li>这个打包的缺点就是不能在css中使用动态地址，必须通过js渲染（vue的动态style）</li>\n</ol>\n<h2 data-v-md-heading=\"node-ts-webpack\" id=\"toc-head-45\" data-v-md-line=\"46\">node+ts+webpack</h2>\n<p data-v-md-line=\"47\">使用webpack的原因是，网上用vite打包node的参考比较少。webpack对比vite确实不是很便捷，暂时只能做到打包，没办法解决打包之后的路径的问题，只能手动去更换线上路径，比较麻烦，后面想办法再进行优化吧。<br>\n以下是打包过程：</p>\n<ol data-v-md-line=\"49\">\n<li>安装webpack、ts-loader、typescript</li>\n</ol>\n<div data-v-md-line=\"50\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-bash line-numbers-mode\"><pre class=\"v-md-prism-bash\"><code>npm i webpack webpack-cli ts-loader typescript\nyarn add webpack webpack-cli ts-loader typescript\npnpm add webpack webpack-cli ts-loader typescript\nni webpack webpack-cli ts-loader typescript\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"2\" data-v-md-line=\"56\">\n<li>然后在<mark>webpack.config.js</mark>进行配置，ts文件使用ts-loader进行处理。</li>\n</ol>\n<div data-v-md-line=\"57\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-js line-numbers-mode\"><pre class=\"v-md-prism-js\"><code><span class=\"token comment\">// webpack.config.js</span>\n<span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">entry</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./app.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">filename</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bundle.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 输出文件夹路径</span>\n        <span class=\"token literal-property property\">publicPath</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span> <span class=\"token comment\">// 公共路径，用于处理静态资源的访问路径</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\".ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".js\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">module</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token literal-property property\">test</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.ts$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">use</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-loader\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token literal-property property\">exclude</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">node_modules</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">optimization</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">minimize</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">mode</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span> <span class=\"token comment\">// 生产模式，会对代码进行优化</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"3\" data-v-md-line=\"87\">\n<li>运行指令编写 → package.json</li>\n</ol>\n<div data-v-md-line=\"88\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-json line-numbers-mode\"><pre class=\"v-md-prism-json\"><code><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev  ./app.ts --mode dev\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"webpack --mode production\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rmjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev utilsPublic/rmjs.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"perfectBuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc &amp;&amp; webpack --mode production &amp;&amp; ts-node-dev utilsPublic/rmjs.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"fontUnicode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev utilsPublic/unique.ts\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><p data-v-md-line=\"98\">tsc : 将ts的代码编译为js<br>\nbuild ：使用webpack将项目中的js进行打包<br>\nrmjs : 将编译ts留下的js进行删除（自定义方法，不删除不行啊，在开发模式每次修改内容都不生效）<br>\nperfectBuild ： 将node.ts打包一步到位 先转译ts→进行打包→删除js<br>\n4. 补充一份删除js的代码  文件路径：utilsPublic/rmjs.ts 自行修改一下即可</p>\n<div data-v-md-line=\"103\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-ts line-numbers-mode\"><pre class=\"v-md-prism-ts\"><code><span class=\"token comment\">//node 删除项目中所有js文件</span>\n<span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:fs\"</span>\n<span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"node:path\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".git\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\".idea\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"dist\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"public\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"webpack.config.js\"</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 使用递归寻找出所有的js文件</span>\n<span class=\"token keyword\">const</span> findJs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>files<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> basePath<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> jsFiles<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> fullPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>basePath<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取文件的完整路径</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exclude<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> stat <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> dirFiles <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jsFiles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token function\">findJs</span><span class=\"token punctuation\">(</span>dirFiles<span class=\"token punctuation\">,</span> fullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 传入完整路径递归查找子目录</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                jsFiles<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>fullPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> jsFiles<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> jsFiles <span class=\"token operator\">=</span> <span class=\"token function\">findJs</span><span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"../\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \njsFiles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br><span class=\"line-number\">27</span><br><span class=\"line-number\">28</span><br><span class=\"line-number\">29</span><br><span class=\"line-number\">30</span><br><span class=\"line-number\">31</span><br><span class=\"line-number\">32</span><br><span class=\"line-number\">33</span><br><span class=\"line-number\">34</span><br><span class=\"line-number\">35</span><br><span class=\"line-number\">36</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><ol start=\"5\" data-v-md-line=\"142\">\n<li>以上就是node+ts+webpack打包的全过程，缺点十分明显，没办法解决打包前后的路径问题，服务器跟本地的地址切换不方便，得手动去更换。还有就是没办法将静态资源public放入打包的dist文件夹中，得自己去复制一份。</li>\n</ol>\n<h2 data-v-md-heading=\"总结\" id=\"toc-head-143\" data-v-md-line=\"144\">总结</h2>\n<p data-v-md-line=\"145\">写这篇文章的时候很奇怪，不知道为什么快速的添加内容在markdown组件中就会将中文内容转为英文的。比如说快速的敲击几下空格，它会将你选中的内容，或者部分内容转换为英文的。不知道是不是markdown组件自带的。<br>\n<img src=\"/api/public/img/articleImages/upload-image1690188380598.png\" alt=\"点击放大\"><br>\n<img src=\"/api/public/img/articleImages/upload-image1690188389965.png\" alt=\"点击放大\"></p>\n', '本文记录了使用vue3+vite和node.ts的打包过程，为了解决路径前后打包的问题', 5);
INSERT INTO `wb_articles` VALUES (18, 1, '2023-07-25 01:52:39', 'vue动态组件切换太快bug', '今天将项目的路由跳转改为动态组件的时候遇到一个神奇的bug。还好解决了\n下面进行记录一下问题原因以及解决办法，下图就是一个简单的动态路由配置，采用双飞翼结构，左右两侧布局\n\n## 问题介绍\n![点击放大](/api/public/img/articleImages/upload-image1690219815215.png)\n![点击放大](/api/public/img/articleImages/upload-image1690220629526.png)\n记住我圈的位置，我现在要进行多次切换组件。通过左侧的按钮，在连续切换的时候，上一个页面没加载完全，就已经去求换新页面的时候就会将动态组件内的组件移到div class=\"content\"以外去\n![点击放大](/api/public/img/articleImages/upload-image1690220891368.png)\n\n## 解决办法\n其实根本原因就是，组件内部的同步动作影响到了下一组件，导致vue内置组件component出现问题，必须要单独设置Suspense组件，不能跟图一 一样全局覆盖Suspense，得单独独立设置Suspense\n![点击放大](/api/public/img/articleImages/upload-image1690221059187.png)\n\n我在网上看了一下，好像没有人说到过这个bug。所以特此记录一下', '2023-07-25 01:52:39', '/img/articleImages/upload-image1690220539703.jpeg', NULL, '<p data-v-md-line=\"1\">今天将项目的路由跳转改为动态组件的时候遇到一个神奇的bug。还好解决了<br>\n下面进行记录一下问题原因以及解决办法，下图就是一个简单的动态路由配置，采用双飞翼结构，左右两侧布局</p>\n<h2 data-v-md-heading=\"问题介绍\" id=\"toc-head-3\" data-v-md-line=\"4\">问题介绍</h2>\n<p data-v-md-line=\"5\"><img src=\"/api/public/img/articleImages/upload-image1690219815215.png\" alt=\"点击放大\"><br>\n<img src=\"/api/public/img/articleImages/upload-image1690220629526.png\" alt=\"点击放大\"><br>\n记住我圈的位置，我现在要进行多次切换组件。通过左侧的按钮，在连续切换的时候，上一个页面没加载完全，就已经去求换新页面的时候就会将动态组件内的组件移到div class=&quot;content&quot;以外去<br>\n<img src=\"/api/public/img/articleImages/upload-image1690220891368.png\" alt=\"点击放大\"></p>\n<h2 data-v-md-heading=\"解决办法\" id=\"toc-head-9\" data-v-md-line=\"10\">解决办法</h2>\n<p data-v-md-line=\"11\">其实根本原因就是，组件内部的同步动作影响到了下一组件，导致vue内置组件component出现问题，必须要单独设置Suspense组件，不能跟图一 一样全局覆盖Suspense，得单独独立设置Suspense<br>\n<img src=\"/api/public/img/articleImages/upload-image1690221059187.png\" alt=\"点击放大\"></p>\n<p data-v-md-line=\"14\">我在网上看了一下，好像没有人说到过这个bug。所以特此记录一下</p>\n', '今天将项目的路由跳转改为动态组件的时候遇到一个神奇的bug。还好解决了<br>\n下面进行记录一下问题原因以及解决办法，下图就是一个简单的动态路由配置，采用双飞翼结构，左右两侧布局', 2);
INSERT INTO `wb_articles` VALUES (19, 1, '2023-08-07 00:17:01', '在vue+ts中使用使用子进程来处理数据(worker)', '网上的对ts使用worker的教程很少。所以自己研究了一下，还是写出来了。ts其实跟js的是一样的，ts中也是可以加载js的子线程worker.js进程文件的，代码如下\n\n\n``` ts\n// 主线程文件 使用 Web Workers 处理图像数据\n  const worker = new Worker(\"/src/utils/worker.js\");\n// postMessage函数要传入你需要在子进程用到的数据\n  worker.postMessage({\n    imageData: imageData,\n    params: { hue, saturation, brightness, contrast },\n  });\n// 通过子进程事件获取到子进程计算的结果\n  worker.onmessage = (event) => {\n    // 获取处理后的图像数据\n    const processedImageData = event.data;\n    context!.putImageData(processedImageData, 0, 0);\n\n    // 继续渲染下一帧\n    requestAnimationFrame(renderToCanvas);\n  };\n```\n``` js\n// 在 worker.js 文件中进行计算处理\nonmessage = (event) => {\n// 获取主进程传回的数据\n  const imageData = event.data.imageData;\n  const data = imageData.data;\n  const params = event.data.params;\n\n  // 处理图像数据，这里使用你之前定义的 change_per_pix 函数\n  for (let i = 0; i < data.length; i += 4) {\n    change_per_pix(params, data, i);\n  }\n  // 处理对比度\n  if (params.contrast && params.contrast != 0) {\n    let avg = getGrayAverage(data);\n    makeContrast(data, avg, params.contrast * 255);\n  }\n  // 返回处理后的图像数据 最后需要返回数据\n  postMessage(imageData);\n};\n\n```\n\n\n其实没想到，ts中可以直接使用js来做子进程，一开始还以为不可以，试了一下，发现没什么问题。\n', '2023-08-07 00:17:01', '/img/articleImages/upload-image1691338740437.jpeg', NULL, '<p data-v-md-line=\"1\">网上的对ts使用worker的教程很少。所以自己研究了一下，还是写出来了。ts其实跟js的是一样的，ts中也是可以加载js的子线程worker.js进程文件的，代码如下</p>\n<div data-v-md-line=\"4\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-ts line-numbers-mode\"><pre class=\"v-md-prism-ts\"><code><span class=\"token comment\">// 主线程文件 使用 Web Workers 处理图像数据</span>\n  <span class=\"token keyword\">const</span> worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/src/utils/worker.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// postMessage函数要传入你需要在子进程用到的数据</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    imageData<span class=\"token operator\">:</span> imageData<span class=\"token punctuation\">,</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> hue<span class=\"token punctuation\">,</span> saturation<span class=\"token punctuation\">,</span> brightness<span class=\"token punctuation\">,</span> contrast <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 通过子进程事件获取到子进程计算的结果</span>\n  worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 获取处理后的图像数据</span>\n    <span class=\"token keyword\">const</span> processedImageData <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    context<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">putImageData</span><span class=\"token punctuation\">(</span>processedImageData<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 继续渲染下一帧</span>\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>renderToCanvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><div data-v-md-line=\"22\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-js line-numbers-mode\"><pre class=\"v-md-prism-js\"><code><span class=\"token comment\">// 在 worker.js 文件中进行计算处理</span>\n<span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 获取主进程传回的数据</span>\n  <span class=\"token keyword\">const</span> imageData <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>imageData<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> imageData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 处理图像数据，这里使用你之前定义的 change_per_pix 函数</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">change_per_pix</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 处理对比度</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>contrast <span class=\"token operator\">&amp;&amp;</span> params<span class=\"token punctuation\">.</span>contrast <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> avg <span class=\"token operator\">=</span> <span class=\"token function\">getGrayAverage</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">makeContrast</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> avg<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">.</span>contrast <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 返回处理后的图像数据 最后需要返回数据</span>\n  <span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span>imageData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div><p data-v-md-line=\"46\">其实没想到，ts中可以直接使用js来做子进程，一开始还以为不可以，试了一下，发现没什么问题。</p>\n', '网上的对ts使用worker的教程很少。所以自己研究了一下，还是写出来了。ts其实跟js的是一样的，ts中也是可以加载js的子线程worker.js进程文件的，代码如下', 1);
INSERT INTO `wb_articles` VALUES (21, 1, '2023-08-12 12:32:24', 'Map对象学习', '今天在研究图像缓存的时候，才想起Map属性可以用来处理相同的数据（避免重复，Set当然也行）。其实很早之前就想学习这两个新引用类型的，就是没什么机会去实验，所以直到现在对他们都不是很了解。今天写图像缓存总算的用到了，很不错的方法，可以借鉴。以下是代码展示\n![点击放大](/api/public/img/articleImages/upload-image1691771049864.png)\n\n\n``` ts\n// 图片加载器 将图像对象在初始化时加载，并在后续渲染时重复使用。\nclass ImageLoader {\n  // 创建一个私有属性 imageCache，用于存储图像 URL 与图像对象的映射关系\n  private imageCache: Map<string, HTMLImageElement> = new Map();\n  // 异步方法，用于加载图像并缓存\n  async loadImage(src: string): Promise<HTMLImageElement> {\n    console.log(this.imageCache); // 打印当前图像缓存，用于调试和观察\n    // 如果 imageCache 中已经有了这个 URL 对应的图像对象，直接返回已缓存的对象\n    if (this.imageCache.has(src)) {\n      return this.imageCache.get(src)!;\n    } else {\n      // 创建一个新的 HTMLImageElement 对象\n      const img = new Image();\n      // 设置图像的 URL 为传入的 src\n      img.src = src;\n      // 等待图像加载和解码完成\n      await img.decode();\n      // 将图像对象缓存到 imageCache 中，以便下次使用\n      this.imageCache.set(src, img);\n      // 返回加载好的图像对象\n      return img;\n    }\n  }\n}\n// 创建一个名为 imageLoader 的 ImageLoader 类的实例，用于加载和缓存图像\nexport const imageLoader = new ImageLoader();\n```', '2023-08-12 12:32:24', '/img/articleImages/upload-image1691771040480.jpeg', NULL, '<p data-v-md-line=\"1\">今天在研究图像缓存的时候，才想起Map属性可以用来处理相同的数据（避免重复，Set当然也行）。其实很早之前就想学习这两个新引用类型的，就是没什么机会去实验，所以直到现在对他们都不是很了解。今天写图像缓存总算的用到了，很不错的方法，可以借鉴。以下是代码展示<br>\n<img src=\"/api/public/img/articleImages/upload-image1691771049864.png\" alt=\"点击放大\"></p>\n<div data-v-md-line=\"5\"><div class=\"v-md-pre-wrapper copy-code-mode v-md-pre-wrapper-ts line-numbers-mode\"><pre class=\"v-md-prism-ts\"><code><span class=\"token comment\">// 图片加载器 将图像对象在初始化时加载，并在后续渲染时重复使用。</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ImageLoader</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 创建一个私有属性 imageCache，用于存储图像 URL 与图像对象的映射关系</span>\n  <span class=\"token keyword\">private</span> imageCache<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> HTMLImageElement<span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 异步方法，用于加载图像并缓存</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>src<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>HTMLImageElement<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印当前图像缓存，用于调试和观察</span>\n    <span class=\"token comment\">// 如果 imageCache 中已经有了这个 URL 对应的图像对象，直接返回已缓存的对象</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageCache<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageCache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 创建一个新的 HTMLImageElement 对象</span>\n      <span class=\"token keyword\">const</span> img <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Image</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 设置图像的 URL 为传入的 src</span>\n      img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 等待图像加载和解码完成</span>\n      <span class=\"token keyword\">await</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 将图像对象缓存到 imageCache 中，以便下次使用</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>imageCache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 返回加载好的图像对象</span>\n      <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 创建一个名为 imageLoader 的 ImageLoader 类的实例，用于加载和缓存图像</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> imageLoader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br><span class=\"line-number\">22</span><br><span class=\"line-number\">23</span><br><span class=\"line-number\">24</span><br><span class=\"line-number\">25</span><br><span class=\"line-number\">26</span><br></div>\n    <button class=\"v-md-copy-code-btn\" type=\"button\">\n      <i>\n        <svg viewbox=\"64 64 896 896\" focusable=\"false\" data-icon=\"copy\" width=\"1em\" height=\"1em\" fill=\"currentColor\" aria-hidden=\"true\">\n          <path d=\"M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z\"></path>\n        </svg>\n      </i>\n    </button></div></div>', '今天在研究图像缓存的时候，才想起Map属性可以用来处理相同的数据（避免重复，Set当然也行）。其实很早之前就想学习这两个新引用类型的，就是没什么机会去实验，所以直到现在对他们都不是很了解。今天写图像缓存总算的用到了，很不错的方法，可以借鉴。以下是代码展示<br>\n<img src=\"/api/public/img/articleImages/upload-image1691771049864.png\" alt=\"点击放大\">', 29);

-- ----------------------------
-- Table structure for wb_articles_types
-- ----------------------------
DROP TABLE IF EXISTS `wb_articles_types`;
CREATE TABLE `wb_articles_types`  (
  `aid` int(11) NOT NULL,
  `type_id` int(11) NOT NULL,
  PRIMARY KEY (`aid`, `type_id`) USING BTREE,
  INDEX `type_id`(`type_id`) USING BTREE
) ENGINE = MyISAM CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Fixed;

-- ----------------------------
-- Records of wb_articles_types
-- ----------------------------
INSERT INTO `wb_articles_types` VALUES (1, 1);
INSERT INTO `wb_articles_types` VALUES (2, 22);
INSERT INTO `wb_articles_types` VALUES (2, 25);

-- ----------------------------
-- Table structure for wb_articlestype
-- ----------------------------
DROP TABLE IF EXISTS `wb_articlestype`;
CREATE TABLE `wb_articlestype`  (
  `type_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(6) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `whether_use` tinyint(1) NULL DEFAULT NULL,
  PRIMARY KEY (`type_id`) USING BTREE,
  UNIQUE INDEX `unique_name_constraint`(`name`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 30 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of wb_articlestype
-- ----------------------------
INSERT INTO `wb_articlestype` VALUES (1, '学习记录', 1);
INSERT INTO `wb_articlestype` VALUES (22, '技术分享', 1);
INSERT INTO `wb_articlestype` VALUES (23, '生活记录', 1);
INSERT INTO `wb_articlestype` VALUES (24, '数码分享', 1);
INSERT INTO `wb_articlestype` VALUES (25, 'ts-vue', 1);
INSERT INTO `wb_articlestype` VALUES (26, 'Linux', 1);
INSERT INTO `wb_articlestype` VALUES (27, '好物分享', 1);
INSERT INTO `wb_articlestype` VALUES (28, '游戏玩家', 1);
INSERT INTO `wb_articlestype` VALUES (29, 'bug', 1);

-- ----------------------------
-- Table structure for wb_comments
-- ----------------------------
DROP TABLE IF EXISTS `wb_comments`;
CREATE TABLE `wb_comments`  (
  `comment_id` int(11) NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `article_id` int(11) NULL DEFAULT NULL,
  `reply_id` int(11) NULL DEFAULT NULL,
  `ground_id` int(11) NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `user_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `user_ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `time` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `head_img` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  PRIMARY KEY (`comment_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 27 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of wb_comments
-- ----------------------------
INSERT INTO `wb_comments` VALUES (24, '有知道怎么解决webpack路径问题的吗？', 16, 0, 0, 'a1024327189@qq.com', 'lzyszds', '', '1690196104', '/img/comments/NO.0005.jpg');
INSERT INTO `wb_comments` VALUES (25, '有知道怎么解决webpack路径问题的吗？', 18, 0, 0, 'a1024327189@qq.com', 'lzyszds', '', '1690298383', '/img/comments/NO.0005.jpg');
INSERT INTO `wb_comments` VALUES (26, '可以，谢谢已解决', 18, 0, 0, 'a1024327189@qq.com', 'lJy', '', '1690298501', '/img/comments/NO.0004.jpg');

-- ----------------------------
-- Table structure for wb_configuration
-- ----------------------------
DROP TABLE IF EXISTS `wb_configuration`;
CREATE TABLE `wb_configuration`  (
  `systemset_id` int(11) NOT NULL AUTO_INCREMENT,
  `system_type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT 'Blog',
  `system_key` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `system_value` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  PRIMARY KEY (`systemset_id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of wb_configuration
-- ----------------------------

-- ----------------------------
-- Table structure for wb_users
-- ----------------------------
DROP TABLE IF EXISTS `wb_users`;
CREATE TABLE `wb_users`  (
  `uid` int(255) NOT NULL AUTO_INCREMENT,
  `uname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `username` varchar(16) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `power` tinyint(1) NULL DEFAULT 1 COMMENT '权限',
  `create_date` datetime NOT NULL COMMENT '注册时间',
  `last_login_date` datetime NULL DEFAULT NULL COMMENT '最近登录时间',
  `head_img` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '头像',
  `whether_use` tinyint(1) NULL DEFAULT 0 COMMENT '是否使用',
  `signature` text CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '签名',
  `activation_key` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '登录密钥：token',
  `create_ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '注册ip',
  `last_login_ip` varchar(15) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '最近登录ip',
  PRIMARY KEY (`uid`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;

-- ----------------------------
-- Records of wb_users
-- ----------------------------
INSERT INTO `wb_users` VALUES (1, '黎智勇', 'admin', '$2a$10$z0Key6vKUiqVIzJWC5sQR..GYO52Oz3UUD4yKLvRmhLLEpU1wKdO.', 0, '2024-01-18 18:59:02', '2024-01-31 23:36:10', '/img/lzy.webp', 1, '了解的越多越觉得自己菜，拼命学习不敢装逼，啥都不知道的，天天吹牛逼', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmFtZSI6ImFkbWluIiwidXNlcm5hbWUiOiJhZG1pbiIsImlhdCI6MTcwNTU3NTU0MiwiZXhwIjoxNzA1NTc5MTQyfQ.Wzrps6z-IA326_aWXbUihzabSrcDCskB0rYLqiyk9eo', '192.168.3.63', NULL);
INSERT INTO `wb_users` VALUES (3, 'test', 'test', '$2a$10$rh2.mMqEY.R8zG3yMvGynO2QDCDk.NnKRCLD19eWYTs5OUto2pTGy', 1, '2024-01-19 22:06:01', NULL, '/img/updateImg/put4.webp', 1, '什么都不留吗?', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmFtZSI6InRlc3QiLCJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE3MDU2NzMxNjEsImV4cCI6MTcwNTY3Njc2MX0.DE7QSuL8u8oigJ5fxp39gSeZSlOaCYzHh-Mvl6p3m84', '::1', NULL);
INSERT INTO `wb_users` VALUES (4, 'lzy', 'lzy', '$2a$10$3bAdOnQeEVjwjSUngKz7A.pDWjfUem4sQUEigrNbm0A9ohyAD.MM.', 1, '2024-01-19 22:10:39', NULL, '/img/updateImg/put5.webp', 1, '什么都不留吗?', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmFtZSI6Imx6eSIsInVzZXJuYW1lIjoibHp5IiwiaWF0IjoxNzA1NjczNDM5LCJleHAiOjE3MDU2NzcwMzl9.SKLpYb3mdWcA-pUPFbKWIc8sIBaJ5qTRK4g4MpZyJCs', '::1', NULL);
INSERT INTO `wb_users` VALUES (5, 'ljy', 'ljy', '$2a$10$6863xvFc3H.qPGS42Pew7upb/RSDKFwo9mz7Yvm4.TmW5bSLNqkQW', 1, '2024-01-19 22:12:24', NULL, '/img/updateImg/put6.webp', 1, '什么都不留吗?', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmFtZSI6ImxqeSIsInVzZXJuYW1lIjoibGp5IiwiaWF0IjoxNzA1NjczNTQ0LCJleHAiOjE3MDU2NzcxNDR9.ksfBNyygqH6mRspKCTilyE4slK3a_SUfQNNDL9Bvx-4', '::1', NULL);

SET FOREIGN_KEY_CHECKS = 1;
